.global asm_main
.align 4
memory: .space 2000000 ;@ 2MB reserved for own use throughout program
.align 4
Zmem: .space 2000000 ;@ 2MB for uploading Zprogram
.align 4
Zstack: .space 1000000 ;@ 1MB for Zstack
.align 4
FZreg: .space 1000000 ;@ 1MB for function local Zregisters
.align 4
temp: .space 256 ;@ 256B temporary storage for holding temp operands to variable operand count instructions
.align 4

asm_main:

;@ Set up transmitter to what TeraTerm is expecting
;@ receiver is already set up
LDR R9, =0x20

LDR R4, =0xE0001004 ;@ Mode Register -- Tera Term transmitter
STR R9, [R4, #0]

;@ Start Baud rate setup
LDR R9, =0x3E ;@ 62 in decimal value
LDR R4, =0xE0001018 ;@ Baud rate generator
STR R9, [R4, #0]

;@ Complete baud rate setup
LDR R9, =0x6
LDR R4, =0xE0001034 ;@ Baud rate divider
STR R9, [R4, #0]

;@ Enable and reset the UART
LDR R9, =0x117
LDR R4, =0xE0001000 ;@ Control register
STR R9, [R4, #0]

  LDR R7, =Zmem
  MOV R4, #0
  LDRB R8, =0b10110010
  STRB R8, [R7, R4]
  ADD R4, R4, #1
  LDRB R8, =0b00100011
  STRB R8, [R7, R4]
  ADD R4, R4, #1
  LDRB R8, =0b01101101
  STRB R8, [R7, R4]
  ADD R4, R4, #1
  LDRB R8, =0b10100000
  STRB R8, [R7, R4]
  ADD R4, R4, #1
  LDRB R8, =0b11110011
  STRB R8, [R7, R4]
  MOV R4, #0

decode_instructions_loop:
  LDR R9, =memory
  LDR R10, [R9]
  LDRB R8, [R7, R4] ;@ Fetch byte from Zmem at ZPC -- Opcode instruction type bits
  PUSH {R4}
  ADD R4, R4, #1
  LDR R10, =15 ;@ instruction indicator -- bits 3 - 0
  AND R9, R8, R10
  PUSH {R9}
  LSR R9, R8, #6 ;@ shift the bits we want to the right end
  CMP R9, #3 ;@ C-Type - 11
  BEQ c_type
  CMP R9, #2 ;@ A-Type - 10
  BEQ a_type
  CMP R9, #1 ;@ B-Type - 01
  BEQ b_type

  a_type:
  LDR R11, =1
  PUSH {R11} 
  LDR R10, =48 ;@ bits 5 & 4
  AND R9, R8, R10
  CMP R9, #48 ;@ operand count is zero - 11
  BEQ no_operands
  CMP R9, #0 ;@ two byte constant - 00
  BLEQ sixteen_bit_fetch
  CMP R9, #16 ;@ one byte constant - 01
  BLEQ eight_bit_fetch
  CMP R9, #32 ;@ one byte operand in register - 10
  BLEQ eight_bit_fetch

sixteen_bit_fetch_for_a_type:
  LDR R12, =temp
  LDRB R10, [R7, R4]
  ADD R4, R4, #1
  LSL R10, R10, #8
  LDRB R11, [R7, R4]
  ADD R4, R4, #1
  ADD R0, R10, R11
  PUSH {R0}
  MOV PC, LR

eight_bit_fetch_for_a_type:
  LDR R12, =temp
  LDRB R0, [R7, R4]
  ADD R4, R4, #1  
  PUSH {R0}
  MOV PC, LR
  
/*
a_type_fetch: //this function will be called from the Zprocedures that have one operand
  LDRB R10, [R7, R4]
  ADD R4, R4, #1
  LDR R11,= 0b11000000
*/

b_type:
  LDR R11, =2
  PUSH {R11} 
  LDR R10, =64
  AND R11, R8, R10
  CMP R11, #0 ;@ 1st operand: one byte constant
  CMP R11, #64 ;@ 1st operand: operand in a register
  LDR R10, =32
  AND R11, R8, R10
  CMP R11, #0 ;@ 2nd operand: one byte constant
  CMP R11, #32 ;@ 2nd operand: operand in register

c_type:
  LDR R11, =3
  PUSH {R11} 
  LDR R10, =31
  AND R9, R8, R10
  PUSH {R9} ;@ instruction indicator
  LDR R10, =32
  AND R9, R8, R10
  CMP R9, #0 ;@ two operands
  
Check_switch:
  LDR R1, =0x41220000 ;@ address of the sliding switches
  LDR R8, [R11, #0] ;@ Getting the value of last state of sliders
  LDR R9, [R1, #0]
  CMP R9, R8
  BEQ Check_switch
  BNE Delay
Delay:
  LDR R10, =200000
  delay_loop:
  SUBS R10, R10, #1
  BEQ Verify_switch
  BNE delay_loop 

Switch_changed:
  LDR R9, =128
  AND R9, R8, R9
  CMP R9, #128
  BLEQ upload_mode
  LDR R9, =128
  AND R9, R8, R9
  CMP R9, #128
  BLNE run_mode
  LDR R9, =32
  AND R9, R8, R9
  CMP R9, #32
  BLEQ debug_mode
  BLNE game_mode
  LDR R1, =0x41220000 ;@ address of the sliding switches
  LDR R11, =memory
  LDR R8, [R11, #0]
  LDR R9, [R1, #0]
  CMP R8, R9
  BEQ Switch_changed
  BNE Check_switch

upload_mode:
  LDR R10, =Zmem
  LDR R9, =64
  AND R9, R8, R9
  CMP R9, #64
  BLEQ no_header_mode
  BLNE header_mode
  no_header_mode:
  LDR R8, =0 ;@ Zmem offset incrementor
  LDR R9, =0 ;@ the null value to store at Zmem offset by R8
  LDR R11, =2000000 ;@ Size of Zmem
  LDR R12, =1000000 ;@ Size of Zstack
  BL Delete_Zmemory
  BL Reset_Zstack
  B Check_receiver_fifo_and_store

Check_receiver_fifo_and_store:
  LDR R9, =0xE000102C ;@  XUARTPS_SR_OFFSET
  LDR R10, [R9, #0]
  TST R10, #2
  BEQ Store
  BNE Check_receiver_fifo_and_store
  LDR R1, =0x41220000 ;@ address of the sliding switches
  LDR R11, =memory
  LDR R8, [R11, #0]
  LDR R9, [R1, #0]
  CMP R8, R9
  BEQ Check_receiver_fifo_and_store
  BNE Delay

Store:
  LDR R8, =0xE0001030 ;@ Memory location where hello world is stored
  LDRB R9, [R8] ;@ loading the input from UART memory location to R8
  STRB R9, [R7, R4] ;@ Storing
  ADD R4, #1
  B Check_receiver_fifo_and_store

Check_tx_fifo_and_print:
  LDR R9, =0xE000102C ;@  XUARTPS_SR_OFFSET
  LDR R10, [R9, #0]
  TST R10, #8
  BEQ Check_tx_fifo_and_print
  Print:
  LDR R8, =0xE0001030 ;@ Memory location where hello world is stored
  STRB R11, [R8] ;@ loading the input from UART memory location to R8
  MOV PC, LR
  
Delete_Zmemory:
  STR R9, [R7, R8]
  ADD R8, R8, #1
  CMP R8, R11
  BLO Delete_Zmemory
  LDREQ R8, =0
  MOVEQ PC, LR

Reset_Zstack:
  LDR R10, =Zstack
  reset_loop:
  STR R9, [R10, R8]
  ADD R8, R8, #1
  CMP R8, R12
  BLO reset_loop
  LDREQ R8, =0
  MOVEQ PC, LR

run_mode:
  MOV PC, LR

header_mode: ;@ first 64 bytes of the game
  LDR R4, =4
  LDR R8, [R7, R4]
  LDR R9, =FZreg
  
  MOV PC, LR

debug_mode:
  MOV PC, LR

crash_mode: 
;@ figure out which type it is (ABC), # of operands, and operand types then print
  POP {R4} ;@ (ZPC offset, opcode)
  BL Check_tx_fifo_and_print
  POP {R9} ;@ instruction indicator
  BL Check_tx_fifo_and_print
  POP {R10} ;@ opcode type
  CMP R10, #1 ;@ A-Type (0 or 1 operands)
  POP {R11} ;@ operand count
  CMP R11, #0
  BEQ setup_crash_print 
  POP {R11}
  BL Check_tx_fifo_and_print
  B
  CMP R10, #2 ;@ B-Type (2 operands)
  CMP R10, #3 ;@ C-Type (2 or variable op)
  BL Check_tx_fifo_and_print 
  B crash_mode
  
  setup_crash_print:
  LDR R11, R9
  BL Check_receiver_fifo_and_store
  
  
  
  LDR R11, R4
  BL Check_receiver_fifo_and_store

game_mode:
  MOV PC, LR

done:
  B done
  
no_ops:
LDR R12, =0
PUSH {R12}

one_op:
LDR R12, =1
PUSH {R12}

two_ops:
LDR R12, =2
PUSH {R12}

var_ops:
LDR R12, =3
PUSH {R12}